# -*- coding: utf-8 -*-
"""bib_relatorios.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SvXx-nBnDNEDTy3pXPtrz36NlMEjj4qn
"""

#from google.colab import drive
#drive.mount('/content/drive')

"""# import"""

import matplotlib.pyplot as plt
from sklearn.metrics import classification_report,confusion_matrix
import seaborn as sns
from sklearn import metrics
from skimage.io import imread
from skimage.transform import resize
from tqdm import tqdm
import numpy as np
import pandas as pd

"""# 04 - Relatório

## matrix confusion
"""

def plot_mat_confux(y_test, y_pred, fold_var, CATEGORIES, save_dir, fig_size=(8,8)):
  """
  --> plota amtrix confusion colors
  :param: y_test: labels real
  :param: y_pred: labels predict
  :param: fold_var: number of control
  :param: CATEGORIES: classes of the dataSet
  :param: save_dir: path from folder to save the matrix image
  :param: fig_size: hight x wight the image, standard (8,8)
  """
  mat =confusion_matrix(y_test, y_pred, normalize='pred')
  plt.figure(figsize = fig_size)
  ax= plt.subplot()
  sns.heatmap(mat, cmap="Blues",annot=True); #annot=True to annotate cells

  ax.set_xticklabels(ax.get_xticklabels(),
                     rotation=90, horizontalalignment='right')
  ax.set_yticklabels(ax.get_yticklabels(),
                     rotation=0, horizontalalignment='right')

  # labels, title and ticks
  ax.set_xlabel('Rótulos previstos');
  ax.set_ylabel('Rótulos verdadeiros');
  ax.set_title('Matriz de confusão');
  ax.xaxis.set_ticklabels(CATEGORIES);
  ax.yaxis.set_ticklabels(CATEGORIES);
  plt.savefig(save_dir+'/mat_conf_'+str(fold_var)+'.jpg')
  plt.show()

"""## metricas"""

def metricas(y_true, y_pred):
  """
  --> evaluation metrics (accuracy_score, precision, recall, fscore, kappa)
  :param: y_test: labels real
  :param: y_pred: labels predict
  :return: vector of the metrics
  """
  acc= metrics.accuracy_score(y_true, y_pred)
  precision, recall, fscore, support = metrics.precision_recall_fscore_support(y_true, y_pred)
  kappa = metrics.cohen_kappa_score(y_true, y_pred)
  me = round(acc, 2), round(np.mean(precision, axis=0), 2), round(np.mean(recall, axis=0), 2), round(np.mean(fscore, axis=0),2), round(kappa, 2)
  print(me)
  return me

"""## aux"""

def load_img(data, input_shape):
  x=[]
  fnames,labels = data['file'],data['labels']
  for f in tqdm(fnames):
        img=imread(f)
        x.append(resize(img,output_shape=input_shape))
  return np.array(x),labels.values

def repor_class(y_test, y_pred, save_dir, fold_var):
  print('Classification Report')
  print(classification_report(y_test, y_pred))

  #Salva o relatório de classificação
  report = classification_report(y_test, y_pred, output_dict=True)
  df_report = pd.DataFrame(report).transpose()
  df_report.to_csv(save_dir+'/result'+str(fold_var)+'.csv', index= True)

def filter_wrong(df_data, y_test, y_pred, save_dir, fold_var):
  df_wrong=pd.DataFrame(columns= ['k','fnames', 'labels', 'predic'])

  print('\n------------wrong filter---------------')
  print('k - fnames - labes - predic')
  for i in range(len(y_pred)):
    a=df_data.iloc[i][0]
    b=y_test[i]
    c=y_pred[i]
    if b!=c:
      print(i,'-',a,'-',b,'-', c)
      df_wrong.loc[i] = [fold_var,a,b,c]
  print('Size wrong: ',len(df_wrong))
  df_wrong.to_csv(save_dir+'/filterWrong'+str(fold_var)+'.csv', index= True)
  return df_wrong


"""## generator reports"""

def gen_reports(df_data, fold_var, model_cnn, CATEGORIES, save_dir, input_shape, fig_size=(8,8)):
  """
  --> generate reports (wrong filter, confusioin matrix, classification_report)
  :param: df_data: data in DataFrame
  :param: fold_var: number of control
  :param: model_cnn: instance model
  :param: CATEGORIES: classes of the dataSet
  :param: save_dir: path from folder to save the reports
  :param: input_shape: resize image for shape, examples (224,224, 3)
  :param: fig_size: hight x wight the image, standard (8,8)
  :return: y_pred, me (vector of the metrics), df (wrong filter)
  """
  X_test,y_test=load_img(df_data, input_shape)
  pred=np.argmax(model_cnn.predict(X_test), axis=-1)

  y_pred = [CATEGORIES[y] for y in pred] # convert

  #filter wrong
  df_wrong=filter_wrong(df_data, y_test, y_pred, save_dir, fold_var)

  #plot mat
  plot_mat_confux(y_test, y_pred, fold_var, CATEGORIES, save_dir, fig_size)

  #metricas
  me=metricas(y_test, y_pred)

  repor_class(y_test, y_pred, save_dir)

  return y_pred, me, df_wrong